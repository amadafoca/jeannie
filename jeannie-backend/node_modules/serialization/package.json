{
  "_args": [
    [
      {
        "raw": "serialization",
        "scope": null,
        "escapedName": "serialization",
        "name": "serialization",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "J:\\GSAP\\Aplicações\\Hackaton\\jeannie-backend"
    ]
  ],
  "_from": "serialization@latest",
  "_id": "serialization@0.2.0",
  "_inCache": true,
  "_location": "/serialization",
  "_npmUser": {
    "name": "erelsgl",
    "email": "erelsgl@gmail.com"
  },
  "_npmVersion": "1.2.23",
  "_phantomChildren": {},
  "_requested": {
    "raw": "serialization",
    "scope": null,
    "escapedName": "serialization",
    "name": "serialization",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://vrt0928:10000/nexus/repository/npmjs-registry/serialization/-/serialization-0.2.0.tgz",
  "_shasum": "155cfdbdfcb55b32797ab5c8ac5a25df9d93ac22",
  "_shrinkwrap": null,
  "_spec": "serialization",
  "_where": "J:\\GSAP\\Aplicações\\Hackaton\\jeannie-backend",
  "author": {
    "name": "Erel Segal-Halevi"
  },
  "bugs": {
    "url": "https://github.com/erelsgl/serialization/issues"
  },
  "dependencies": {},
  "description": "serialize and deserialize objects with function arguments in Node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "155cfdbdfcb55b32797ab5c8ac5a25df9d93ac22",
    "tarball": "http://vrt0928:10000/nexus/repository/npmjs-registry/serialization/-/serialization-0.2.0.tgz"
  },
  "homepage": "https://github.com/erelsgl/serialization#readme",
  "keywords": [
    "Node.js",
    "Serialization",
    "serialize",
    "deserialize",
    "json"
  ],
  "license": "LGPL",
  "main": "index.js",
  "maintainers": [
    {
      "name": "erelsgl",
      "email": "erelsgl@gmail.com"
    }
  ],
  "name": "serialization",
  "optionalDependencies": {},
  "readme": "serialize\n=========\n\nSerialize Javascript object hierarchies that contain multiple types and functions.\n\nThis library was built with the following use-case in mind:\n\nYou have a complex classifier, such as in the [limud.js](https://github.com/erelsgl/limdu) framework. \nFor example, it may be a hierarchical multi-label classifier, based on a binary classifier, with a custom feature extractor.\n\nYou want to train the classifier on your computer, and use the trained classifier on another machine.\nThe another machine may be, for example, a web-server that uses the trained classifier to classify new\nsamples on demand. \n\nSo, you would like to save the trained classifier to a file, then transfer the file to the remote server,\nand then read the classifier from the file on that remote server.\n\nUnfortunately, this task is not natively supported in Node.js. The native Node.js serialization\nmechanism is JSON.stringify/JSON.parse, but, these functions handle only data fields - not functions \nor class prototypes.\n\nThis library suggests the following solution (pseudo-code).\n\nOn the home machine:\n\n\tfunction createNewClassifier() {\n\t\t// Write code to create a fresh  (untrained) classifier.\n\t\t// This code should be stand-alone - it should include all the 'require' statements\n\t\t//   required for creating the classifier.\n\t\t// Use \"__dirname\" to refer to the current folder, \n\t\t//   so that the result will be able to run on another folder. \n\t}\n\t\n\tvar myClassifier = createNewClassifier();\n\n\tmyClassifier.train(dataset);\n\t\n\tvar serialize = require('serialize'); // require the current package\n\t\n\tvar myClassifierString = serialize.toString(myClassifier, createNewClassifier);\n\t\n\t// save myClassifierString to a file, and send to the remote server.\n\t// the createNewClassifier function is also saved.\n\nOn the remote server:\n\n\tvar myClassifierString = // read from file\n\t\n\tvar serialize = require('serialize'); // require the current package\n\n\tvar baseFolder = __dirname; // this comes in place of the \"__dirname\"s in createNewClassifier \n\n\tvar myClassifier = serialize.fromString(myClassifierString, baseFolder);\n\t\n\tmyClassifier.classify(sample);\n\nThe demos folder contains two working demos (demo1 and demo2), and one non-working demo (demo3) that is left for future work.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/erelsgl/serialization.git"
  },
  "version": "0.2.0"
}
